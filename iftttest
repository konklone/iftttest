#!/usr/bin/env node

/*
  Test a channel by simulating the execution of triggers, status,
  and other IFTTT API calls.
*/

var fs = require("fs"),
    request = require('request');


var Channel = {


  /******* test methods *****/

  // status endpoint
  // https://ifttt.com/developers/docs/protocol_reference#channel-status
  status: function(args) {
    Channel.get("/ifttt/v1/status");
  },

  // check a trigger.
  // required:
  //   --trigger: trigger slug
  // optional:
  //   --limit: max number of items to be returned (num)
  //   --before: return items before this time (string)
  //   --after: return items after this time (string)
  //   --triggerFields: trigger fields (object)
  // https://ifttt.com/developers/docs/protocol_reference#triggers
  trigger: function(args) {
    if (!args.trigger) return console.log("Specify a --trigger.");

    var body = {};
    if (args.fields) body.triggerFields = args.fields;
    if (args.limit) body.limit = args.limit;
    if (args.before) body.before = Channel.time(args.before);
    if (args.after) body.after = Channel.time(args.after);

    Channel.post("/ifttt/v1/triggers/" + args.trigger, body);
  },

  // dynamic trigger field options.
  // required:
  //   --trigger: trigger slug
  //   --field: field slug
  // https://ifttt.com/developers/docs/protocol_reference#trigger-field-dynamic-options
  trigger_options: function(args) {
    if (!args.trigger) return console.log("Specify a --trigger.");
    if (!args.field) return console.log("Specify a --field.");

    Channel.post("/ifttt/v1/triggers/" + args.trigger + "/fields/" + args.field + "/options");
  },

  // dynamic trigger field options.
  // required:
  //   --trigger: trigger slug
  //   --field: field slug
  //   --value: field value
  // https://ifttt.com/developers/docs/protocol_reference#trigger-field-dynamic-validation
  trigger_validate: function(args) {
    if (!args.trigger) return console.log("Specify a --trigger.");
    if (!args.field) return console.log("Specify a --field.");

    var body = {value: args.value};
    Channel.post("/ifttt/v1/triggers/" + args.trigger + "/fields/" + args.field + "/validate", body);
  },


  /******* utility methods, used by tests *****/

  // workhorse request method, output what is being done.
  request: function(method, url, body) {
    // default to http:// if no protocol given
    var host = Channel.config.host;
    if (Channel.config.host.search(/^https?:\/\//) < 0)
      host = "http://" + host;
    var url = host + url;

    // always expect json in return
    var options = {method: method, url: url, json: true, headers: {}};

    console.log(method + ": " + url);

    // if set, client secret will always be sent
    if (Channel.config.secret) {
      var auth = Channel.config.secret;
      console.log("IFTTT-Channel-Key: " + auth)
      options.headers["IFTTT-Channel-Key"] = auth;
    }

    if (body) {
      console.log("With: " + Channel.pp(body));
      options.json = body;
    }

    request(options, function (error, response, body) {
      if (error) return console.log("ERROR: " + error);

      console.log("Status: " + response.statusCode);
      if (body) console.log("\n" + Channel.pp(body));
    });
  },

  get: function(url) {return Channel.request("GET", url)},
  post: function(url, body) {return Channel.request("POST", url, body)},

  pp: function(object) {return JSON.stringify(object, null, 4)},
  time: function(timestamp) {
    // assume any epoch time passed in via CLI is in seconds
    if (typeof(timestamp) == "number")
      timestamp = timestamp * 1000;

    return new Date(timestamp).getTime() / 1000;
  },


  /**** config for the channel ******/

  config: {

    host: null,
    secret: null,

    // get the whole config file
    get: function() {
      if (fs.existsSync(Channel.config.filename))
        return JSON.parse(fs.readFileSync(Channel.config.filename));
      else
        return {};
    },

    set: function(key, value) {
      var config = Channel.config.get();
      config[key] = value;

      var data = JSON.stringify(config, null, 2) + "\n";
      fs.writeFileSync(Channel.config.filename, data);
    },

    // destructive, does a get() and then merges it with Channel.config
    load: function() {
      var config = Channel.config.get();
      for (var key in config)
        Channel.config[key] = config[key];
    },

    filename: process.env.HOME + "/.iftttest"
  }
};


/******* tiny CLI *****/

var optimist = require('optimist');
var args = optimist
  .alias("field", "f")
  .alias("trigger", "t")
  .alias("help", "h")
  .describe("help", "See this message.")
  .describe("field", "Field slug to be simulated.")
  .describe("trigger", "Trigger slug to be simulated.")
  .usage("iftttest COMMAND [options]\n\n" +
      "COMMAND is one of:\n  status, trigger, trigger_options, trigger_validate\n\n" +
      "Set channel parameters with:\n" +
      "  iftttest set [key] [value]\n\n" +
      "You need to set a `host` before running other commands, e.g.:\n" +
      "  iftttest set host localhost:8000")
  .argv;

if (args.help) {
  console.log(optimist.help());
  process.exit(0);
}

// --args: debug to understand how args get parsed
if (args.args) {
  console.log("args: " + Channel.pp(args));
  process.exit(0);
}

// special command: `set` will set a value in $HOME/.iftttest
if (args._[0] == "set") {
  var key = args._[1];
  var value = args._[2];

  console.log("Setting `" + key + "` to `" + value + "`");
  Channel.config.set(key, value);

  process.exit(0);
}

// special command: `config` will print out the current config
if (args._[0] == "config") {
  console.log(JSON.stringify(Channel.config.get(), null, 2));
  process.exit(0);
}


// default: an IFTTT command
var command = args._[0];
if (!command) {
  console.log(optimist.help());
  process.exit(1);
}


/**** tiny config ****/

// $HOME/.iftttest is an optional JSON config file for default parameters.
//
// supported parameters:
//   host: base hostname
//   secret: client secret

Channel.config.load();
if (!Channel.config.host) {
  console.log("Set a base hostname first, with: iftttest set host [hostname]");
  process.exit(1);
}


// go!
Channel[command](args);